plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'high-traffic'
version = '0.0.1-SNAPSHOT'

// 멀티 모듈 구조
allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic'

        implementation 'org.springframework.boot:spring-boot-starter-web'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok' // 테스트에서도 사용할 수 있게 작성

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    }

//    def querydslDir = 'src/main/generated'
    def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

    sourceSets {
        main.java.srcDirs += [ querydslDir ]
    }

    clean {
        delete file(querydslDir)
    }

    tasks.withType(JavaCompile).configureEach {
        options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
    }

    clean.doLast {
        file(querydslDir).deleteDir()
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}
